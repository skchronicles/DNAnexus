#!/bin/bash
# ccbr_rsem_results_merge 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of GeneResults: '${GeneResults[@]}'"
    echo "Value of IsoformResults: '${IsoformResults[@]}'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

		mkdir -p /data
		cd /data
		mkdir -p $HOME/out/ExpectedCounts
		mkdir -p $HOME/out/TPM
		mkdir -p $HOME/out/FPKM

    for i in ${!GeneResults[@]}
    do
    	genes=$(dx describe "${GeneResults[$i]}" --name)
    	dx download "${GeneResults[$i]}" -o $genes
    done

    for i in ${!IsoformResults[@]}
    do
    	isoforms=$(dx describe "${IsoformResults[$i]}" --name)
    	dx download "${IsoformResults[$i]}" -o $isoforms
    done

		python /rsem_merge_results.py /${Genome}.annotate.genes.txt /data /data

(>&2 echo "DEBUG:Listing all files in data")
(>&2 tree /data)
(>&2 echo "Done listing")
		
		mv *expected_count.all_samples.txt $HOME/out/ExpectedCounts
		mv *TPM.all_samples.txt $HOME/out/TPM
		mv *FPKM.all_samples.txt $HOME/out/FPKM

(>&2 echo "DEBUG:Listing all files in out")
(>&2 tree $HOME/out)
(>&2 echo "Done listing")		

dx-upload-all-outputs --parallel 
    
    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

#     for i in "${!ExpectedCounts[@]}"; do
#         dx-jobutil-add-output ExpectedCounts "${ExpectedCounts[$i]}" --class=array:file
#     done
#     for i in "${!FPKM[@]}"; do
#         dx-jobutil-add-output FPKM "${FPKM[$i]}" --class=array:file
#     done
#     for i in "${!TPM[@]}"; do
#         dx-jobutil-add-output TPM "${TPM[$i]}" --class=array:file
#     done
}
